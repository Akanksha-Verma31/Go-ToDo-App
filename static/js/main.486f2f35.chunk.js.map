{"version":3,"sources":["To-Do-List.js","App.js","serviceWorker.js","index.js"],"names":["endpoint","ToDoList","props","onChange","event","setState","target","name","value","onSubmit","task","state","axios","post","headers","then","res","getTask","console","log","get","data","items","map","item","color","style","wordWrap","status","Card","key","_id","fluid","Content","Header","textAlign","Meta","Icon","onClick","updateTask","className","paddingRight","undoTask","deleteTask","id","put","delete","this","as","Form","Input","type","placeholder","Group","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.486f2f35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\r\n\r\nlet endpoint = \"https://to-do-app-luim.onrender.com\";\r\n\r\nclass ToDoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      task: \"\",\r\n      items: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTask();\r\n  }\r\n\r\n  onChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = () => {\r\n    let { task } = this.state;\r\n    // console.log(\"pRINTING task\", this.state.task);\r\n    if (task) {\r\n      axios\r\n        .post(\r\n          endpoint + \"/api/task\",\r\n          {\r\n            task,\r\n          },\r\n          {\r\n            headers: {\r\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          this.getTask();\r\n          this.setState({\r\n            task: \"\",\r\n          });\r\n          console.log(res);\r\n        });\r\n    }\r\n  };\r\n\r\n  getTask = () => {\r\n    axios.get(endpoint + \"/api/task\").then((res) => {\r\n      if (res.data) {\r\n        this.setState({\r\n          items: res.data.map((item) => {\r\n            let color = \"yellow\";\r\n            let style = {\r\n              wordWrap: \"break-word\",\r\n            };\r\n\r\n            if (item.status) {\r\n              color = \"green\";\r\n              style[\"textDecorationLine\"] = \"line-through\";\r\n            }\r\n\r\n            return (\r\n              <Card key={item._id} color={color} fluid>\r\n                <Card.Content>\r\n                  <Card.Header textAlign=\"left\">\r\n                    <div style={style}>{item.task}</div>\r\n                  </Card.Header>\r\n\r\n                  <Card.Meta textAlign=\"right\">\r\n                    <Icon\r\n                      name=\"check circle\"\r\n                      color=\"green\"\r\n                      onClick={() => this.updateTask(item._id)}\r\n                    />\r\n                    <button className=\"done\" style={{ }} onClick={() => { this.updateTask(item._id) ;}}>\r\n                      Done\r\n                    </button>\r\n                    <span style={{ paddingRight: 10 }}></span>\r\n                    <Icon\r\n                      name=\"undo\"\r\n                      color=\"yellow\"\r\n                      onClick={() => this.undoTask(item._id)}\r\n                    />\r\n                    <button className=\"undoo\" onClick={()=>{this.undoTask(item._id)}}>Undo</button>\r\n                    <span style={{ paddingRight: 10 }}></span>\r\n                    <Icon\r\n                      name=\"delete\"\r\n                      color=\"red\"\r\n                      onClick={() => this.deleteTask(item._id)}\r\n                    />\r\n                    <span style={{ paddingRight: 10 }}><button className=\"del\" onClick={()=>{this.deleteTask(item._id)}}>Delete</button></span>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            );\r\n          }),\r\n        });\r\n      } else {\r\n        this.setState({\r\n          items: [],\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  updateTask = (id) => {\r\n    axios\r\n      .put(endpoint + \"/api/task/\" + id, {\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.getTask();\r\n      });\r\n  };\r\n\r\n  undoTask = (id) => {\r\n    axios\r\n      .put(endpoint + \"/api/undoTask/\" + id, {\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.getTask();\r\n      });\r\n  };\r\n\r\n  deleteTask = (id) => {\r\n    axios\r\n      .delete(endpoint + \"/api/deleteTask/\" + id, {\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res);\r\n        this.getTask();\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <Header className=\"header\" as=\"h2\">\r\n            TO DO LIST\r\n          </Header>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Form onSubmit={this.onSubmit}>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"task\"\r\n              onChange={this.onChange}\r\n              value={this.state.task}\r\n              fluid\r\n              placeholder=\"Create Task\"\r\n            />\r\n            {/* <Button >Create Task</Button> */}\r\n          </Form>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Card.Group>{this.state.items}</Card.Group>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Container } from \"semantic-ui-react\";\nimport ToDoList from \"./To-Do-List\";\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <ToDoList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}